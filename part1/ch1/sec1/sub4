1.1.4 The Standard Library

The library chapters are less tutorial than the language chapters. In particular, they are meant to be read in order and can be used as a user-level manual for the library components:
Chapter 30	Standard-Library Overview gives an overview of the standard library, lists the standard-library headers, and presents language support and diagnostics support, such as exception and system_error.
Chapter 31	STL containers presents the containers from the iterators, containers, and algorithms framework (called the STL), including vector, map, and unordered_set.
Chapter 32	STL Algorithms presents the algorithms from the STL, including find(), sort(), and merge().
Chapter 33	STL Iterators presents iterators and other utilities from the STL, including reverse_iterator, move_iterator, and function.
Chapter 34	Memory and Resources presents utility components related to memory and resource management, such as array, bitset, pair, tuple, unique_ptr, shared_ptr, allocators, and the garbage collector interface.
Chapter 35	Utilities presents minor utility components, such as time utilities, type traits, and various type functions.
Chapter 36	Strings documents the strings library, including the character traits that are the basis for the use of different character sets.
Chapter 37	Regular Expressions describes the regular expression syntax and teh various ways of using it for string matching, including regex_match() for matching a complete string, regex_search for finding a pattern in a string, regex_replace() for simple replacement, and regex_iterator for general traversal of a stream of characters.
Chapter 38	I/O Streams documents the stream I/O library. It describes formatted and unformatted input and output, error handling, and buffering.
Chapter 39	Locales describes the class locale and its various facets that provide support for the handling of cultural differences in character sets, formatting of numeric values, formatting of date and time, and more.
Chapter 40	Numerics describes facilities for numeric computation (such as complex, valarray, random numbers, and generalized numerical algorithms).
Chapter 41	Concurrency presents the C++ basic memory model and the facilities offered for concurrent programming without locks.
Chapter 42	Threads and Tasks presents the classes providing threads-and-locks-style concurrent programming (such as thread, timed_mutex, lock_guard, and try_lock()) and the support for task-based concurrency (such as future and async()).
Chapter 43	The C Standard Library documents the C standard library (including printf() and clock()) as incorporated into the C++ standard library.
Chapter 44	Compatibility discusses the relation between C and C++ and between Standard C++ (also called ISO C++) and the versions of C++ that preceded it.
